1) Клиент-Серверная архитектура
Клиент-Сервер - вычислительная или сетевая ахитектура, в которой задания или сетевая нагрузка распределны между поставщиками услуг, называемыми серверами, и заказчиками услуг, называемыми клиентами.
Фактически клиент и сервер - это ПО. Обычно эти программы расположены на разных вычилительных машинах и взаимодействую между собой через вычислительную сеть посредством сетевых протоколов, но они могут 
быть расположены так же и на одной машине. Программы-серверы ожидают от клиентских программ запросыв и продоставляют им свои ресурсы ввиде:
     
a) данных (например, загрузка файлов посредством HTTP,FTP,BitTorrent, потоковое мультимедия или работа с базами данных);

HTTP - (HyperText Transfer Protocol - "протокол передачи гипертекста") - протокол прикладного уровня передачи данных, изначально - в виде гипертекстовых документов (то есть документов, которые могут содержать ссылки
позволяющие организовать переход к другим докуметам) в формете HTML, в настоящее время используется для передачи произвольных данных.

FTP - (File Transfer Protocol "протокол передачи файлов") - появившийся в 1971 года задолго до HTTP является одни из старейших прикладных протоколов.

BitTorrent - ("битовый поток") - сетевой прокол для кооперативного обмена файлами через интернет. Файлы передаются частями, кажды torrent-клиент, получая эти части в то же время отдает их другим клиентам, что снижает 
нагрузку и зависимость от каждого клиента - источника и обеспечивает избыточность данных

Потоковое мультимедия - мультимедия, которое непрерывно получает пользователь от провайдера потокового вещания. Это понятин приминимо как к информации, распространяемой через телекоммуницации, так и к информации, которая
изначально распространялась посредством потокового вещания (например, радио, телевидение) или не потоковой (например, книги, видеокассеты, аудио CD)
     
b) сервисных функций (например, работа с электронной почтой, общение посредством систем мгновенного обмена сообщениями или простотр web-страниц во всемирной паутине)

Клиент - та программа, с которой работает пользователь. Он знать не знает, это у него на компьютере программа целиком, или где-то за ней прячутся сервер с базой
Он рабоатет в браузезе или desktop-приложением. И все, что ему нужно знать - это "куда тут тыкать"

Сервер - компьютер, на котором хранится само приложениею. Весь код, вся логика, все дополнительные материалы и спровочники.

БД - это место для хранения даннхы.

Виды клиент-серверной архитектуры.

a) Одноуровленеая ахритектура "клиент-сервер" - такая, где все прикладные программы рассредоточены по рабочим станциям, которые обращаются к общему серверу баз данных или к общему файлому серверу.
Никаких прикладных программ сервер при этом не исполняет, только предоставляет данные.

+ Надежная 
- Сложно управлять потому что данные будут присутствовать в разных вариантах.

b) Двухуровневая архитектура "клиент-сервер" - следует относить такую, в которой прикладные программы сосредоточены на сервере приложений например, сервере 1С или сервере CRM, а рабочих станциях программы клиенты, которые предоставляют 
для пользователей интерфейс для работы с приложениями на общем сервере

с) Трехуровневая архитектура "клиент-сервер" - В трехуровневой архитектуре сервер баз данных, файловый сервер и другие представляют собой отдельный уровень, результаты работы которого использует сервер приложений.
Логика данных и бизнес - логика находятся в сервере приложений. Все обращение клиентов которое находится на сервере приложений. Вследствие этого, повышается гибкость работы и производительность

Трехуровневая архитектура содержит: Урвоень представления; Уровень логики; Уровень данных

d) Многоуровневая архитектура (N-Tier) "клиент-сервер" В отделньый класс архитектуры "клиент-сервер" можно вывести многоуровневую архитектуру в которой несколько серверов приложений используют результаты работы друг друга, а так же данные от различных
серверов баз данных, файловых серверов и других видов серверов.

Клиент-Серверная архитектура содержит (толстый клиент, тонкий сервер)

a) Толстый клиент - клиент, выполняющий запрашиваемые со стороны пользователя манипуляции независимо от ведущего сервера или это рабочая машина или ПК, которые функционируют на основе своей ОС и наполнены полноценным набором ПО для тербуемых задач пользователя.

+ Большая функциональность
+ Наличие многопользовательского режима
+ Возможность работать оффлайн
+ Мгновенное быстродействие
+ Минимальная зависимость от сложных серверов.

- Все рабочие машины на постоянной основе нуждаются в техническом обслуживании
- Нужда индивидуальном обновлении аппаратного ПО каждого клиента до уровня программного обеспечения
- Массивные объемы дистрибутивов
- Полная зависимость от платформ, под которую данныве клиента были созданы.

b) Тонкий клиент - клиент, который может переносить выполнение задач по обработке информации на сервер, не применяя свои мощности по вычипслению для их внедрения.
Все вычислительные ресурсы прбодного клиента максимально ограничены, важно, что бы их хватало для старта нужного сетевого ПО, применяя, к примеру, веб-интерфейс

Одним из наиболее распространенныз примеров такого типа клиента считается ПК с заранее установленным веб=браузером, который применяется для функционирования с веб-програмами

+ Минимальное аппаратное обслуживание
+ Низкий риск возникновения неисправности
+ Минимальные технические требования к аппаратному оборудованию

- При сбое на сервер пострадают все подключеныне пользователи
- Нет возможности работать без активного подключения к сети
- При взаимодействии с большим массивом данных может снижаться обьем производительности основного сервера.

Разница между тонким и толстым клиентом
Отличия между ними - это варианты обработки данных. Толстые клиенты работают с информацией на основе собственных аппаратных и программных возможностей, в то же время тонкие применяют ПО центрального сервера только что бы обработать данные, предоставляя системе лишь
требуемый графический интерфейс для выполнения работы пользователем. Это значит, что роли тонких клиентов иногда мы можем увидеть устаревшие или не очень производительные ПК


2) Что ткое HTTP и HTTPS

a) HTTP - (HyperText Transfer Protocol - "протокол передачи гипертекста") - протокол прикладного уровня передачи данных, изначально - в виде гипертекстовых документов (то есть документов, которые могут содержать ссылки
позволяющие организовать переход к другим докуметам) в формете HTML, в настоящее время используется для передачи произвольных данных. HTTP используется  так же в качестве "транспорта" дяля других протоколов прикладного уровня
таких как SOAP. Обмен сообщниями идет по обыковенной схеме "запрос-ответ" HTTP же устанавливает отделью TCP - сессию. Каждое HTTP сообщение состоит из трех частей, которые передаются в указанном порядке.
1. Стартовая строк - определяет тип сообщения, различается для запроса и ответа
2. Заголовки - характеризуют тело сообщения, параметры передачи и прочие сведения
3. Тело сообщения - непосредственно данные сообщения, обязательно должно отделяться от загловков и пустой строки.

b) HTTPS - (HyperText Transfer Protocol Secure - расширение протоклоа HTTP для поддержка шифрования в целях повышение безопасности. Данные в протоколе HTTPS передаются поверх криптографических протоклов TLS или устаревешго ы 2015 SSL)
НТТPS он обеспечивает защиту от атак, основанных на прослушивании сетевого соединения - от снифферских атак и атк типа man-in-the-middle, при условии, что будут использоваться шифрующие средства и сертификат сервера проверен и ему доверяют

По умолчанию HTTPS URL использует 443 TCP-порт (для незащищенного HTTP - 80) 
В HHTPS для шифрования используется длина ключа 40, 56, 128, 256 бит. Некоторые старые версии браузеров использую длину 40 бит (пример тому IE -версий до 4.0) Длина ключа 40 бит не является надежной. Многие совервеменные сайты требуеют использования новых версий браузеров
поддерживающих шифрование с длиной 128 бит, что значительно затрудняет подбор паролей и доступ к личной информации


3) HTTP методы

a) GET - Метод для чения данных с сайта. он так же считается безопасным, потому что не меяет сотояние сервера, Метод GET отправляет скрипту всю собранную информацию формы как часть URL,
количество информации передаваемой методом GET через URL 2048 символами, страницу сгенерированную методом GET можно добавить в закладки и поделится ссылкой

b) HEAD - аналогичен методу GET, за исключением того, что в ответе сервера отсутсвует тело. Запрос HEAD обычно применяется для извлечения метаданных, проверки наличия ресурса
и что бы узнрать не изменился ли он с момента последнего обращенияю

c) POST - Метод применяется для передачи пользовательских данных заданному ресурсу, отправляет скрипту всю собранную информацию формы как часть URL, метод POST позволяет передавать файлы.
POST используется так же для создания ресурсов

d) PUT - Метод применятся для загрузки содержимого запроса на указанный в запросе URI. Если по заданному URI не существует ресурса, то сервер создает его и возвращает статус 201
Так же служит для изменения или вставки ресурсов

e) PATCH - Аналогично PUT, но применяется только к фрагменту ресурса

f) DELETE - Удаляет указанный ресурс

g) TRACE - Возвращает полученный запрос так, что клиент может увидеть, какую информацию промежуточные серверы добавляют или изменяют в запросе

h) CONNECT - Преобразует соединение запроса в прозрачный TCP/IP-туннель, обычно что бы содействовать установлению защищенного SSL-соединения через нешифрованный прокси

i) OPTIONS - Используется для определения возможностей веб-сервера или параметрова соединения для конкретного ресурса и для получения полного описания маршрута


4) HTTP статус коды сервера

a) 100-е (1ХХ) - Информационные:

100 - Continue сервер удовлетворён начальными сведениями о запросе, клиент может продолжать пересылать заголовки

101 - Switching Protocol (Переключение протокола). Этот код присылается в ответ на запрос клиента, содержащий заголовок Upgrade:, и указывает, 
что сервер переключился на протокол, который был указан в заголовке. Эта возможность позволяет перейти на несовместимую версию протокола и обычно не используется 

102 - Processing (В обработке) запрос принят, но на его обработку понадобится длительное время. Используется сервером, чтобы клиент не разорвал соединение из-за превышения времени ожидания

103 - Early Hints (Ранние подсказки) В ответе сообщаются ресурсы, которые могут быть загружены заранее, пока сервер будет подготавливать основной ответ.

b) 200-е (2ХХ) - Успех

200 - OK (Успешно) Запрос успешно обработан. Что значит "успешно", зависит от метода HTTP, который был запрошен

201 - Created (Создано) Запрос успешно выполнен и в результате был создан ресурс. Этот код обычно присылается в ответ на запрос PUT "ПОМЕСТИТЬ"

202 - Accepted (Принято) апрос принят, но ещё не обработан. Не поддерживаемо, т.е., нет способа с помощью HTTP отправить асинхронный ответ позже, который будет показывать итог обработки запроса

203 - Non-Authoritative Information (Информация не авторитетна) Этот код ответа означает, что информация, которая возвращена, была предоставлена не от исходного сервера, а из какого-нибудь другого источника

204 - No Content (Нет содержимого) Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются

205 - Reset Content (Сбросить содержимое) Этот код присылается, когда запрос обработан, чтобы сообщить клиенту, что необходимо сбросить отображение документа, который прислал этот запрос

с) 300-е (3ХХ) - Перенаправление

300 - Multiple Choice (Множественный выбор) Этот код ответа присылается, когда запрос имеет более чем один из возможных ответов

301 - Moved Permanently (Перемещён на постоянной основе) Этот код ответа значит, что URI запрашиваемого ресурса был изменён

302 - Found (Найдено) Этот код ответа значит, что запрошенный ресурс временно изменён

303 - See Other (Просмотр других ресурсов) Этот код ответа присылается, чтобы направлять клиента для получения запрашиваемого ресурса в другой URI с запросом GET.

304 - Not Modified (Не модифицировано) Используется для кеширования. Это код ответа значит, что запрошенный ресурс не был изменён. Таким образом, клиент может продолжать использовать кешированную версию ответа.
 
305 - Use Proxy (Использовать прокси) Это означает, что запрошенный ресурс должен быть доступен через прокси



d) 400-е (4ХХ) - Ошибка клиента

400 - Bad Request (Плохой запрос) Этот ответ означает, что сервер не понимает запрос из-за неверного синтаксиса

401 - Unauthorized (Неавторизованно) Для получения запрашиваемого ответа нужна аутентификация. Статус похож на статус 403, но,в этом случае, аутентификация возможна. 

402 - Payment Required (Необходима оплата) Этот код ответа зарезервирован для будущего использования. Первоначальная цель для создания этого когда была в использовании его для цифровых платёжных систем(на данный момент не используется).

403 - Forbidden (Запрещено) У клиента нет прав доступа к содержимому, поэтому сервер отказывается дать надлежащий ответ

404 - Not Found (Не найдено) Сервер не может найти запрашиваемый ресурс. Код этого ответа, наверно, самый известный из-за частоты его появления в вебе. 

405 - Method Not Allowed (Метод не разрешён)  Сервер знает о запрашиваемом методе, но он был деактивирован и не может быть использован. Два обязательных метода,  GET и HEAD,  никогда не должны быть деактивированы и не должны возвращать этот код ошибки.
 
409 - Conflict (Конфликт) Этот ответ отсылается, когда запрос конфликтует с текущим состоянием сервера.

422 - Unprocessable Entity (не обрабатываемый объект) сервер успешно принял запрос, может работать с указанным видом данных (например, в теле запроса находится XML-документ, имеющий верный синтаксис),


e) 500-е (5ХХ) - Ошибка сервера

500 - Internal Server Error (Внутренняя ошибка сервера) Сервер столкнулся с ситуацией, которую он не знает как обработать. 

501 - Not Implemented (Не выполнено) Метод запроса не поддерживается сервером и не может быть обработан. Единственные методы, которые сервера должны поддерживать (и, соответственно, не должны возвращать этот код) -  GET и HEAD.

502 - Bad Gateway (Плохой шлюз) Эта ошибка означает что сервер, во время работы в качестве шлюза для получения ответа, нужного для обработки запроса, получил недействительный (недопустимый) ответ

503 - Service Unavailable (Сервис недоступен). Сервер не готов обрабатывать запрос. Зачастую причинами являются отключение сервера или то, что он перегружен.

504 - Gateway Timeout  (Время ожидания) Этот ответ об ошибке предоставляется, когда сервер действует как шлюз и не может получить ответ вовремя

505 - HTTP Version Not Supported (HTTP-версия не поддерживается) HTTP-версия, используемая в запросе, не поддерживается сервером.


5) Что такое ядро браузера 

Ядро браузера можно разделить на две части: движок рендеринга (инженер макета или движок рендеринга) и движок JS. Он отвечает за получение содержимого веб-страницы (HTML, XML изоюражения и.т.д) Организацию информации (например добавление CSS). Разница в ядере браузера
будет по-разному интерпретировать синтаксис веб-страницы, поэтому эффект редеринга будет другим.

Имееются классификации ядер браузера.

1. Trident (ядро IE) 

2. Gecko (ядро Firefox)

3. Presto (ядро Opera)

4. Webkit (ядро Safari)

5. Chromium(ядро Сhrome)


6) Какие браузеры какиие ядра используют
 
1. IE - Trident

2. Firefox - Gecko

3. Opera - Presto

4. Safari - Webkit

5. Сhrome - Chromium

6. Ядекс-браузер - Chromium


7) Что такое API

API – Application Programming Interface, что значит программный интерфейс приложения

API – это механизмы, которые позволяют двум программным компонентам взаимодействовать друг с другом, используя набор определений и протоколов. Например, система ПО метеослужбы содержит ежедневные данные о погоде. 
Приложение погоды на телефоне «общается» с этой системой через API и показывает ежедневные обновления погоды на телефоне.


8) Что такое эндпоинты

Эндпоинт - это конечная точка, само обращение к маршруту отдельным HTTP методом. Эндпоинт выполняют конкретную щадачу, приминают параметры и возвращают данные клиенту


9) URL (URI, URL, URN)

1. URI (Uniform Resource Identifier "унифицированный идентификатор ресурса") - Обозначает имя и адрес ресурса в сети. Как правило, делится на URL и URN, поэтому URL и URN это составляющие URI.
Пример:  http://handynotes.ru/2009/09/uri-url-urn.html

2. URL (Uniform Resource Locator "унифицированный определитель местонахождения ресурса") - Адрес некоторого ресурса в веб. URL определяет местонахождение ресурса и способ обращения к нему.
Пример: http://handynotes.ru

3. URN ("Unifrorm Resource Name унифицированное имя ресурса") - Имя некоторого ресурса в веб. Смысл URN в том, что он определяет только название конкретного предмета, который может находится во множестве конкретных мест.
Пример: /2009/09/uri-url-urn.html


10) Идемпотентные HTTP методы

Метод HTTP является идемпотентным, елси повторный идентичный запрос сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера.
Другими словами, идемпотентный метод не должен иметь никаких побочных эффектов, ктром сбора статистики или подобных операций. Корректно реализованные методы:

a) GET

b) HEAD

c) PUT

f) DELETE




11) Безопасные HTTP методы

Метод HTTP является безопасным, если он не меняет состояние сервераю Другими словами, безопасный метод проводи операции "только чтение". Несколько следующих методов:

a) GET

b) HEAD

c) OPTIONS

Все безопасные методы являются так же идемпотентными, как и другие, но при этом небезопасные, такие как PUT или DELETE


12) Идентификация, Аутентификация, Авторизация


1. Идентификация - процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.

2. Аутентификация - процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем сохраненным в базе данных

3. Авторизация - предоставление определенному лицу или группе лиц прав на выполнение опреденных действий


13) Что такое IP

IP-адрес – это уникальный адрес, идентифицирующий устройство в интернете или локальной сети. IP означает «Интернет-протокол» – набор правил, регулирующих формат данных, отправляемых через интернет или локальную сеть.

По сути, IP-адрес – это идентификатор, позволяющий передавать информацию между устройствами в сети: он содержит информацию о местоположении устройства и обеспечивает его доступность для связи. IP-адреса позволяют различать компьютеры, 
маршрутизаторы и веб-сайты в интернете и являются важным компонентом работы интернета.


14) Что такое октет.

IP состояит из четырех частей, записанных в виде десятичных чисел с точками. Каждую из этих четырех частей называют октетом. 
Октет представляет собой восемь двоичных цифр (от 00000000 до 11111111) или (от 0 до 255) в десятичном виде.


15) Что такое DNS

DNS (система доменных имен) преобразует доменные имена, удобные для человеческого восприятия (например, www.amazon.com), в IP-адреса, понимаемые машиной (например, 192.0.2.44).


16) Что такое порт? Cколько портов у Linux сервера?

Порт идентификатор, чтобы определить получателя пакета.

Cколько портов у Linux сервера 1-650000

1-1023 привелигированные порты (для веб)


17) Уровни OSI

1. Физический - Работа со средой передачи, сигналами и двоичными данными ( витая пара, коаксиальный, оптоволоконный) обрудование (Концентратор)

2. Канальный - Физическая адресация оборудование (Сетевой мост, Коммутатор,точка доступа)

3. Сетевой - Определение маршрута и логическая адресация (IPv4, IPv6) оборудование (Маршрутизатор)

4. Транспортный - Прямая связь между конечными пунктами и надёжность (TCP, Порты) оборудование (Хосты)

5. Сеансовый - Управление сеансом связи, оборудование (Хосты)

6. Представления - Представление и шифрование данных (Хосты)

7. Прикладной - Доступ к сетевым службам (HTTP) (Хосты)


18) Хедеры http запросов

Хедеры http запросов это специальные параметры, которые несут определенную служебную информацию о соединении по HTTP. Некоторые заголовки имеют лишь информационный характер для пользователя или для компьютера, другие передают определенные команды, исходя из которых, сервер или клиент будет выполнять какие-то действия.
В зависимости от того, где эти заголовки могут находиться, они разделяются на:

General Headers (Основные заголовки) — должны быть и в запросах и в ответах клиента и сервера, могут включаться в любое сообщение клиента и сервера

Request Headers (Заголовки запроса) — используются только в запросах клиента.

Response Headers (Заголовки ответа) — используются только в ответах сервера.

Entity Headers (Заголовки сущности) — сопровождают каждую сущность сообщения.

19) Октет в DNS

Октет это 8 бит 

Простыми словами это кусок айпишника.